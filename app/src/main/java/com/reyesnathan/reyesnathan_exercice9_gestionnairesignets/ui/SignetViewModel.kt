package com.reyesnathan.reyesnathan_exercice9_gestionnairesignets.ui

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.reyesnathan.reyesnathan_exercice9_gestionnairesignets.data.entities.Signet
import com.reyesnathan.reyesnathan_exercice9_gestionnairesignets.data.repository.SignetRepository
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.collectLatest
import kotlinx.coroutines.launch
import androidx.lifecycle.ViewModelProvider


/**
 * ViewModel servant d‚Äôinterm√©diaire entre le d√©p√¥t et l‚Äôinterface utilisateur.
 *
 * Il g√®re l‚Äô√©tat courant de la liste des signets et les op√©rations CRUD.
 *
 * Source : Fiche 53.6 ‚Äì Utiliser le d√©p√¥t de donn√©es via le ViewModel
 */
class SignetViewModel(private val repository: SignetRepository) : ViewModel() {

    // === √âtat expos√© √† l‚ÄôUI ===
    private val _listeSignets = MutableStateFlow<List<Signet>>(emptyList())
    val listeSignets: StateFlow<List<Signet>> = _listeSignets

    init {
        // R√©cup√®re en continu la liste depuis le repository (Flow)
        viewModelScope.launch {
            repository.tousLesSignets.collectLatest { signets ->
                _listeSignets.value = signets
            }
        }
    }

    /* Inspir√© de : Fiche 66.3 ‚Äì Enregistrement */
    fun ajouterSignet(titre: String, url: String, description: String) {
        viewModelScope.launch {
            repository.insererSignet(titre, url, description)
        }
    }

    /** Supprime un signet existant */
    fun supprimerSignet(signet: Signet) {
        viewModelScope.launch {
            repository.supprimerSignet(signet)
        }
    }

    /** Vide enti√®rement la liste des signets */
    fun viderSignets() {
        viewModelScope.launch {
            repository.supprimerTous()
        }
    }
}

/**
 * üß† Explications de ChatGPT :
 *
 * viewModelScope ‚Üí permet d‚Äôex√©cuter les coroutines dans le cycle de vie du ViewModel.
 *
 * collectLatest ‚Üí observe le flux de la BD et met √† jour _listeSignets d√®s qu‚Äôun changement survient.
 *
 * MutableStateFlow / StateFlow ‚Üí architecture unidirectionnelle (ta r√®gle de base pour tous les ViewModel).
 */